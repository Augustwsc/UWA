Three sums
第一思路是三重循环，复杂度太高，关键是判断重复的情况
判断重复：1.Arrays.sort()排序
         2.判断后一个是否跟前一个元素相同，如果相同则++
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums); //key
        List<List<Integer>> result=new ArrayList<List<Integer>>();
        int m=nums.length;
        for(int i=0;i<m-2;i++){
            if(i>0&&nums[i]==nums[i-1])
                i++;
            for(int j=i+1;j<m-1;j++){
                if(j>i+1&&nums[j]==nums[j-1])
                j++;
                for(int k=j+1;k<m;k++){
                    if(k>j+1&&nums[k]==nums[k-1])
                    k++;
                    if(nums[i]+nums[j]+nums[k]==0){
                        List<Integer> result1=new ArrayList<Integer>();
                        result1.add(nums[i]);
                        result1.add(nums[j]);
                        result1.add(nums[k]);
                        result.add(result1);
                    }
                }
            }
        }
        return result;
    }
}

思路二复杂度为n^2
1. 排序，去重，同1
2. 确定左右两个端点，如果大于需求，左移right;小于需求，右移left.
3. 外层套循环
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> result=new ArrayList<List<Integer>>();
        for (int i=0;i<nums.length-2;i++){
            int left=i+1;
            int right=nums.length-1;
            if(i>0&&nums[i]==nums[i-1])
                continue;
            while (left<right){
                if(nums[i]+nums[left]+nums[right]==0){
                    result.add(Arrays.asList(new Integer[]{nums[i], nums[left], nums[right]}));
                while(left<right&&nums[left]==nums[left+1])
                    left++;             //后一个跟前一个重复，先移动到后一个再++进行新的寻找
                while(left<right&&nums[right]==nums[right-1])
                    right--;
                left++;
                right--;
                }
                else if (nums[i]+nums[left]+nums[right]>0) right--;
                else left++;
            }
        }
        return result;
    }
}
